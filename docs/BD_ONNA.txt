
-- Inserções iniciais

create database ONNA;
use ONNA;

-- use test;
-- drop database ONNA;


-- Tabela central

create table tblTipo_Usuario(
idTipo_Usuario int primary key auto_increment,
status_Ban tinyint default 0,
email varchar(120) unique not null,
senha varchar(120) not null,	
nome varchar(100) not null,
dataNasc date not null,
avatar int not null, -- Serão imagens pré-selecionadas por nossa equipe, depositadas na pasta do aplicativo web/mobile
tipo_Usuario tinyint not null -- Valor [0] será perfil pessoal; valor [1] será perfil profissional
);


-- Funcionalidade de chat privado

create table tblContato(
idContato int primary key auto_increment,

idTipo_Usuario int unique not null,
constraint fkTipo_Usuario_tblContato foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario)
);

create table tblColecao_Contato(
idColecao_Contato int primary key auto_increment,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblColecao_Contato foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idContato int not null,
constraint fkContato_tblColecao_Contato foreign key (idContato) references tblContato (idContato)   
);

create table tblConversa_Privada(
idConversa_Privada int primary key auto_increment,
mensagem varchar(4000) not null,
data_Mensagem date not null, -- now()
hora time not null, -- now()

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblConversa_Privada foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idContato int not null,
constraint fkContato_tblConversa_Privada foreign key (idContato) references tblContato (idContato) 
);


-- Funcionalidades do mobile "Perfil Pessoal"

create table tblPerfil_Pessoal(
idUsuario int primary key auto_increment,

idTipo_Usuario int unique not null,
constraint fkTipo_Usuario_tblPerfil_Pessoal foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario)
);

create table tblNotificacao(
idNotificacao int primary key auto_increment,
titulo varchar(50) not null,
mensagem varchar(255),
data_Notificacao date not null,
hora time not null,

idUsuario int not null,
constraint fkPerfil_Pessoal_tblNotificacao foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario)
);

create table tblCalendario_Personalizado(
idCalendario int primary key auto_increment,
dia_Marcado date not null,
periodo int default 7 not null,

idUsuario int unique not null,
constraint fkPerfil_Pessoal_tblCalendario_Personalizado foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario)
);

create table tblRelatorio_Humor(
idRelatorio_Humor int primary key auto_increment,
media_Humor decimal not null,
data_Relatorio date not null, -- now()

idUsuario int not null,
constraint fkPerfil_Pessoal_tblRelatorio_Humor foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario)
);


-- Funcionalidades do mobile "Perfil Profissional"

create table tblPerfil_Profissional(
idProfissional int primary key auto_increment,
crm int(5),
crp int(5),
uf char(2) not null,
area_Formacao varchar(80) not null,

idTipo_Usuario int unique not null,
constraint fkTipo_Usuario_tblPerfil_Profissional foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario)
);

create table tblDisponibilidade(
idDisponibilidade int primary key auto_increment,
data_Disponibilidade date not null,
hora_Inicial time not null, -- Início do intervalo de disponibilidade para chat
hora_Final time not null, -- Fim do intervalo de disponibilidade para chat,

idProfissional int unique not null,
constraint fkPerfil_Profissional_tblDisponibilidade foreign key (idProfissional) references tblPerfil_Profissional (idProfissional)
);


-- Funcionalidades do website

create table tblForum(
idForum int primary key auto_increment,
nome varchar(80) unique not null,
descricao varchar(500)
);

create table tblPostagem(
idPostagem int primary key auto_increment,
status_Ban tinyint default 0,
titulo varchar(300) not null,
subtitulo varchar(4000),
imagem longtext,
data_Postagem date not null, -- now()
hora time not null, -- now()
reacoes int default 0,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblPostagem foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idForum int not null,
constraint fkForum_tblPostagem foreign key (idForum) references tblForum (idForum)
);

create table tblResposta_Postagem(
idResposta_Postagem int primary key auto_increment,
status_Ban tinyint default 0,
mensagem varchar(4000) not null,
data_Resposta date not null, -- now()
hora time not null, -- now()
reacoes int default 0,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblResposta_Postagem foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idPostagem int not null,
constraint fkPostagem_tblResposta_Postagem foreign key (idPostagem) references tblPostagem (idPostagem)
);

create table tblDenuncia(
idDenuncia int primary key auto_increment,
status_Check tinyint default 0, -- Campo que receberá instância [1] quando a denúncia for resolvida no desktop 
descricao varchar(2000),
data_Denuncia date not null, -- now()
hora time not null, -- now()

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblDenuncia foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idPostagem int,
constraint fkPostagem_tblDenuncia foreign key (idPostagem) references tblPostagem (idPostagem),

idResposta_Postagem int,
constraint fkResposta_Postagem_tblDenuncia foreign key (idResposta_Postagem) references tblResposta_Postagem (idResposta_Postagem)
);

create table tblTipo_Denuncia(
idTipo_Denuncia int primary key, -- Cada inteiro irá se referir a um dos tipos já definidos (ofensa, discriminação etc.)
tipo varchar(40) not null
);

create table tblColecao_Tipo(
idColecao_Tipo int primary key auto_increment,

idDenuncia int not null,
constraint fkDenuncia_tblColecao_Tipo foreign key (idDenuncia) references tblDenuncia (idDenuncia),

idTipo_Denuncia int not null,
constraint fkTipo_Denuncia_tblColecao_Tipo foreign key (idTipo_Denuncia) references tblTipo_Denuncia (idTipo_Denuncia)
);


-- Funcionalidades Desktop

create table tblAdmin(
idAdmin int primary key auto_increment,
username varchar(120) unique not null,
senha varchar(120) not null 
);

create table tblGenero(
idGenero int primary key, -- Cada inteiro irá se referir a um dos gêneros já definidos (maternidade, gravidez etc.)
genero varchar(40) not null
);

create table tblArtigo(
idArtigo int primary key auto_increment,
titulo varchar(255) not null,
resumo varchar(3000) not null,
fonte varchar(1000) not null,
data_Publicacao date not null, -- now()

idAdmin int not null,
constraint fkAdmin_tblArtigo foreign key (idAdmin) references tblAdmin (idAdmin),

idGenero int not null,
constraint fkGenero_tblArtigo foreign key (idGenero) references tblGenero (idGenero)
);


-- Dados pré-cadastrados em nosso banco:

insert into tblGenero (idGenero, genero) values
(1, 'Menstruação'), 
(2, 'Engravidar'), 
(3, 'Gestação'), 
(4, 'Maternidade'), 
(5, 'Cuidados com o corpo');

insert into tblTipo_Denuncia (idTipo_Denuncia, tipo) values
(1, 'Abuso verbal'), -- Lingujar ofensivo, ameaças
(2, 'Discurso de ódio'), -- Racismo, sexismo, homofobia etc. 
(3, 'Nome ofensivo ou inadequado'), -- Nome de usuário indevido 
(4, 'Postagem inadequada'), -- Assuntos não relevantes à proposta da plataforma ONNA, como propaganda política, conteúdo explícito etc. 
(5, 'Spam de mensagens'); -- Excesso de postagens irrelevantes na plataforma ONNA

insert into tblForum (nome, descricao) values
('#Desabafos', 'Espaço dedicado ao acolhimento dos problemas da alma'),
('#Gravidez', 'Ambiente para sanar dúvidas e questionamentos sobre o período de gravidez'),
('#Autocuidado', 'Trocas de informações sobre a preservação do corpo feminino'),
('#Maternidade', 'Discussões sobre os devidos cuidados com nenês e seu desenvolvimento saudável');









-- Procedures Desktop

-- tblAdmin

delimiter /
create procedure cadastro_Admin (
in p_username varchar(120),
in p_senha varchar(120)
)

begin
	insert into tblAdmin (username, senha) values (p_username, p_senha);
end /
delimiter ;

delimiter /
create procedure login_Admin (
in p_username varchar(120)
)

begin
	select * from tblAdmin where username = p_username;
end /
delimiter ;


-- tblArtigo

delimiter /
create procedure criar_Artigo (
in p_titulo varchar(255), 
in p_resumo varchar(3000), 
in p_fonte varchar(1000),
in p_idAdmin int,
in p_idGenero int
)

begin
	insert into tblArtigo (titulo, resumo, fonte, data_Publicacao, idAdmin, idGenero) values (p_titulo, p_resumo, p_fonte, now(), p_idAdmin, p_idGenero);
end /
delimiter ;

delimiter /
create procedure consultar_Artigo (
in p_titulo varchar(255)
)

begin
	select idArtigo, titulo, resumo, fonte, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação', idAdmin, idGenero from tblArtigo where titulo like concat('%', p_titulo, '%');
end /
delimiter ;

delimiter /
create procedure consulta_Superficial_Artigo ()

begin
	select idArtigo, titulo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') from tblArtigo 
	
	order by idArtigo;
end /
delimiter ;

delimiter /
create procedure consulta_Detalhada_Artigo (
in p_idArtigo int
)

begin
	select titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA', fonte from tblArtigo where idArtigo = p_idArtigo;
end /
delimiter ;

delimiter /
create procedure excluir_Titulo_Artigo (
in p_titulo varchar(255)
)

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação', idGenero from tblArtigo where titulo like concat('%', p_titulo, '%'); 
end /
delimiter ;

delimiter /
create procedure excluir_Artigo (
in p_idArtigo int
)

begin
	delete from tblArtigo where idArtigo = p_idArtigo;
end /
delimiter ;

delimiter /
create procedure alterar_Artigo (
in p_idArtigo int,
in p_titulo varchar(255), 
in p_resumo varchar(3000), 
in p_fonte varchar(1000), 
in p_idGenero int
)

begin
	update tblArtigo set titulo = p_titulo, resumo = p_resumo, fonte = p_fonte, data_Publicacao = now(), idGenero = p_idGenero where idArtigo = p_idArtigo;
end /
delimiter ;


-- tblDenuncia

delimiter /
create procedure consulta_Superficial_Denuncia ()

begin
	select a.idDenuncia, a.idTipo_Usuario, a.idPostagem, a.idResposta_Postagem, date_format(str_to_date(a.data_Denuncia, '%Y-%m-%d'), '%d/%m/%Y') as 'Data da denúncia',       
	       b.email as 'Quem denunciou',   
           c.nome as 'Fórum',
           d.email as 'Quem foi denunciado' from tblDenuncia a 
       
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario
	inner join tblPostagem e on a.idPostagem = e.idPostagem
	inner join tblForum c on e.idForum = c.idForum
	inner join tblTipo_Usuario d on d.idTipo_Usuario = e.idTipo_Usuario where a.status_Check = 0
       
	union all
       
	select a.idDenuncia, a.idTipo_Usuario, a.idPostagem, a.idResposta_Postagem, date_format(str_to_date(a.data_Denuncia, '%Y-%m-%d'), '%d/%m/%Y') as 'Data da denúncia',       
		   b.email as 'Quem denunciou',   
           c.nome as 'Fórum',
           d.email as 'Quem foi denunciado' from tblDenuncia a   
       
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario
	inner join tblResposta_Postagem e on a.idResposta_Postagem = e.idResposta_Postagem
	inner join tblPostagem f on e.idPostagem - f.idPostagem
	inner join tblForum c on f.idForum = c.idForum
	inner join tblTipo_Usuario d on e.idTipo_Usuario = d.idTipo_Usuario where a.status_Check = 0 
	
	order by idDenuncia;
end /
delimiter ;

-- A própria aplicação desktop deverá distinguir uma [postagem] de uma [resposta de postagem], checando se o [idResposta_Postagem = null] por exemplo

delimiter /
create procedure consulta_Detalhada_Denuncia_Postagem (
in p_idDenuncia int
)

begin
	select a.descricao as 'Descrição da denúncia',
		   b.email as 'Quem denunciou',
		   c.titulo as 'Título da postagem denunciada', c.subtitulo as 'Detalhes da postagem denunciada',
		   d.email as 'Quem foi denunciado' from tblDenuncia a
               
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario
	inner join tblPostagem c on a.idPostagem = c.idPostagem
	inner join tblTipo_Usuario d on c.idTipo_Usuario = d.idTipo_Usuario where idDenuncia = p_idDenuncia;
end /
delimiter ;

delimiter /
create procedure imagem_Postagem (
in p_idPostagem int
)

begin
	select imagem from tblPostagem where idPostagem = p_idPostagem;
end /
delimiter ;

delimiter /
create procedure consulta_Detalhada_Denuncia_Resposta (
in p_idDenuncia int
)

begin
	select a.descricao as 'Descrição da denúncia',
		   b.email as 'Quem denunciou',
		   c.mensagem as 'Mensagem denunciada',
		   d.email as 'Quem foi denunciado' from tblDenuncia a
               
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario
	inner join tblResposta_Postagem c on a.idResposta_Postagem = c.idResposta_Postagem
	inner join tblTipo_Usuario d on c.idTipo_Usuario = d.idTipo_Usuario where idDenuncia = p_idDenuncia;
end /
delimiter ;

-- Esta última procedure exibirá o(s) tipo(s) da denúncia clicada

delimiter /
create procedure exibir_Tipo_Denuncia (
in p_idDenuncia int
)

begin
	select idTipo_Denuncia from tblColecao_Tipo where idDenuncia = p_idDenuncia;
end /
delimiter ;

-- Nas consultas detalhadas, deve-se guardar o [email] da pessoa denunciada para a execução da procedure a seguir:

delimiter /
create procedure banir_Usuario (
in p_email_Denunciado varchar(120)
)

begin
	update tblTipo_Usuario set status_Ban = 1 where email = p_email_Denunciado;
end /
delimiter ;

delimiter /
create procedure apagar_Postagem (
in p_idPostagem int
)

begin
	update tblPostagem set status_Ban = 1 where idPostagem = p_idPostagem;	
end /
delimiter ;

delimiter /
create procedure apagar_Resposta (
in p_idResposta_Postagem int
)

begin
	update tblResposta_Postagem set status_Ban = 1 where idResposta_Postagem = p_idResposta_Postagem;	
end /
delimiter ;

delimiter /
create procedure ignorar_Denuncia (
in p_idDenuncia int
)

begin
	update tblDenuncia set status_Check = 1 where idDenuncia = p_idDenuncia;
end /
delimiter ;









-- Procedures do usuário

-- Apenas após todas as validações de preenchimento de campo por parte da aplicação web/mobile que se registrará todos os dados de cadastro no banco (simultaneamente)

delimiter /
create procedure cadastro_Tipo_Usuario (
in p_email varchar(120),
in p_senha varchar(120),
in p_nome varchar(100),
in p_dataNasc date,
in p_avatar int,
in p_tipo_Usuario tinyint
)

begin
	insert into tblTipo_Usuario (email, senha, nome, dataNasc, avatar, tipo_Usuario) values (p_email, p_senha, p_nome, p_dataNasc, p_avatar, p_tipo_Usuario);
end /
delimiter ;

-- Cadastros especificos para cada tipo de usuário. Devem ser realizados logo após o cadastro da [tblTipo_Usuario]

delimiter /
create procedure cadastro_Perfil_Pessoal (
in p_idTipo_Usuario int
)

begin
	insert into tblPerfil_Pessoal (idTipo_Usuario) values (p_idTipo_Usuario);
end /
delimiter ;

delimiter /
create procedure cadastro_Perfil_Profissional (
in p_crm int(5),
in p_crp int(5),
in p_uf char(2),
in p_area_Formacao varchar(80),
in p_idTipo_Usuario int
)

begin
	insert into tblPerfil_Profissional (crm, crp, uf, area_Formacao, idTipo_Usuario) values (p_crm, p_crp, p_uf, p_area_Formacao, p_idTipo_Usuario);
end /
delimiter ;

-- Para finalizar o cadastro em nossa plataforma, deve-se preencher a [tblContato] com os dados do novo usuário

delimiter /
create procedure cadastro_Contato (
in p_idTipo_Usuario int
)

begin
	insert into tblContato (idTipo_Usuario) values (p_idTipo_Usuario);
end /
delimiter ;

-- login

delimiter /
create procedure login_Tipo_Usuario (
in p_email varchar(120)
)

begin
	select idTipo_Usuario, email, nome, senha, date_format(str_to_date(dataNasc, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de nascimento', avatar, tipo_Usuario from tblTipo_Usuario where email = p_email and status_Ban = 0;
end /
delimiter ;

-- Exibição dos dados de perfil

-- Caso o campo [tipo_Usuario] seja [1], também serão exibidas as informações do perfil profissional 

delimiter /
create procedure exibir_Dados_Profissional (
in p_idTipo_Usuario int
)

begin
	select crp, crm, uf, area_Formacao from tblPerfil_Profissional where idTipo_Usuario = p_idTipo_Usuario;
end /
delimiter ;

-- Alterações de dados do perfil

delimiter /
create procedure modificar_Perfil (
in p_idTipo_Usuario int,
in p_senha varchar(120),
in p_nome varchar(100),
in p_dataNasc date,
in p_avatar int
)

begin
	update tblTipo_Usuario set nome = p_nome, senha = p_senha, dataNasc = p_dataNasc, avatar = p_avatar where idTipo_Usuario = p_idTipo_Usuario;
end /
delimiter ;

delimiter /
create procedure modificar_Area_Formacao (
in p_idTipo_Usuario int,
in p_area_Formacao varchar(80)
)

begin
	update tblPerfil_Profissional set area_Formacao = p_area_Formacao where idTipo_Usuario = p_idTipo_Usuario;
end /
delimiter ;









-- Procedures comunidade web

-- tblForum

delimiter /
create procedure criar_Forum (
in p_nome varchar(80),
in p_descricao varchar(500)
)

begin
	insert into tblForum (nome, descricao) values (p_nome, p_descricao);
end /
delimiter ;

/* Importante armazenar o id do fórum clicado na aplicação web. São os valores correspondentes:
   
   Fórum #Desabafos   -> id = 1
   Fórum #Gravidez    -> id = 2
   Fórum #Autocuidado -> id = 3
   Fórum #Maternidade -> id = 4
*/

-- tblPostagem

delimiter /
create procedure criar_Postagem (
in p_titulo varchar(300),
in p_subtitulo varchar(4000),
in p_imagem longtext,
in p_idTipo_Usuario int,
in p_idForum int
)

begin
	insert into tblPostagem (titulo, subtitulo, imagem, data_Postagem, hora, idTipo_Usuario, idForum) values (p_titulo, p_subtitulo, p_imagem, now(), now(), p_idTipo_Usuario, p_idForum);
end /
delimiter ;

delimiter /
create procedure exibir_Postagem (
in p_idForum int
)

begin
	select a.idPostagem, a.titulo, a.subtitulo, a.imagem, date_format(str_to_date(a.data_Postagem, '%Y-%m-%d'), '%d/%m/%Y') as 'Data da postagem', date_format(a.hora, '%H:%i') as 'Hora da postagem', a.reacoes,
	       b.avatar, b.nome from tblPostagem a
           
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario where idForum = p_idForum and a.status_Ban = 0 and b.status_Ban = 0 
	
	order by data_Postagem, hora, reacoes desc;
end /
delimiter ;

delimiter /
create procedure consulta_Titulo_Postagem (
in p_titulo varchar(300),
in p_idForum int
)

begin
	select a.idPostagem, a.titulo, a.subtitulo, a.imagem, date_format(str_to_date(a.data_Postagem, '%Y-%m-%d'), '%d/%m/%Y') as 'Data da postagem', date_format(a.hora, '%H:%i') as 'Hora da postagem', a.reacoes,
	       b.avatar, b.nome from tblPostagem a
           
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario where titulo like concat('%', p_titulo, '%') and idForum = p_idForum and a.status_Ban = 0 and b.status_Ban = 0
	
	order by titulo;
end /
delimiter ;

-- Upvote e downvote

delimiter /
create procedure gostei_Postagem (
in p_idPostagem int
)

begin
	update tblPostagem set reacoes = reacoes + 1 where idPostagem = p_idPostagem;
end /
delimiter ;

delimiter /
create procedure desgostei_Postagem (
in p_idPostagem int
)

begin
	update tblPostagem set reacoes = reacoes - 1 where idPostagem = p_idPostagem;
end /
delimiter ;


-- tblResposta_Postagem

delimiter /
create procedure criar_Resposta_Postagem (
in p_mensagem varchar(4000),
in p_idTipo_Usuario int,
in p_idPostagem int
)

begin
	insert into tblResposta_Postagem (mensagem, data_Resposta, hora, idTipo_Usuario, idPostagem) values (p_mensagem, now(), now(), p_idTipo_Usuario, p_idPostagem);
end /
delimiter ;

delimiter /
create procedure exibir_Resposta_Postagem (
in p_idPostagem int
)

begin
	select a.idResposta_Postagem, a.mensagem, date_format(str_to_date(a.data_Resposta, '%Y-%m-%d'), '%d/%m/%Y') as 'Data da resposta', date_format(a.hora, '%H:%i') as 'Hora da resposta', a.reacoes,
	       b.avatar, b.nome from tblResposta_Postagem a
           
	inner join tblTipo_Usuario b on a.idTipo_Usuario = b.idTipo_Usuario where idPostagem = p_idPostagem and a.status_Ban = 0 and b.status_Ban = 0 
	
	order by data_Resposta, hora, reacoes desc;
end /
delimiter ;

-- Upvote e downvote

delimiter /
create procedure gostei_Resposta (
in p_idResposta_Postagem int
)

begin
	update tblResposta_Postagem set reacoes = reacoes + 1 where idResposta_Postagem = p_idResposta_Postagem;
end /
delimiter ;

delimiter /
create procedure desgostei_Resposta (
in p_idResposta_Postagem int
)

begin
	update tblResposta_Postagem set reacoes = reacoes - 1 where idResposta_Postagem = p_idResposta_Postagem;
end /
delimiter ;


-- Procedures de denúncia

delimiter /
create procedure criar_Denuncia (
in p_descricao varchar(2000),
in p_idTipo_Usuario int,
in p_idPostagem int,
in p_idResposta_Postagem int
)

begin
	insert into tblDenuncia (descricao, data_Denuncia, hora, idTipo_Usuario, idPostagem, idResposta_Postagem) values (p_descricao, now(), now(), p_idTipo_Usuario, p_idPostagem, p_idResposta_Postagem);
end /
delimiter ;

-- Precisaremos armazenar o [idDenuncia] da denúncia recém-criada para a próxima procedure

delimiter /
create procedure armazena_idDenuncia (
in p_idTipo_Usuario int
)

begin
	select idDenuncia from tblDenuncia where idTipo_Usuario = p_idTipo_Usuario
    
    order by idDenuncia desc limit 1;
end /
delimiter ;

-- Durante o processo de uma denúncia, o usuário preencherá as categorias dessa denúncia. Para cada categoria selecionada, executar a procedure a seguir:

delimiter /
create procedure relacionar_Categoria_Denuncia (
in p_idDenuncia int,
in p_idTipo_Denuncia int
)

begin
	insert into tblColecao_Tipo (idDenuncia, idTipo_Denuncia) values (p_idDenuncia, p_idTipo_Denuncia);
end /
delimiter ;


-- Procedures de artigo

-- A exibição dos artigos estará classificada em cinco gêneros:

delimiter /
create procedure exibir_Artigo_Menstruacao ()

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA' from tblArtigo where idGenero = 1
    
	order by data_Publicacao desc;
end /
delimiter ;

delimiter /
create procedure exibir_Artigo_Engravidar ()

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA' from tblArtigo where idGenero = 2
    
	order by data_Publicacao desc;
end /
delimiter ;

delimiter /
create procedure exibir_Artigo_Gestacao ()

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA' from tblArtigo where idGenero = 3
    
	order by data_Publicacao desc;
end /
delimiter ;

delimiter /
create procedure exibir_Artigo_Maternidade ()

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA' from tblArtigo where idGenero = 4
    
	order by data_Publicacao desc;
end /
delimiter ;

delimiter /
create procedure exibir_Artigo_Cuidados_Corpo ()

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA' from tblArtigo where idGenero = 5
    
	order by data_Publicacao desc;
end /
delimiter ;

delimiter /
create procedure consulta_Titulo_Artigo (
in p_titulo varchar(255)
)

begin
	select idArtigo, titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação', idGenero from tblArtigo where titulo like concat('%', p_titulo, '%'); 
end /
delimiter ;

delimiter /
create procedure consulta_Artigo_Selecionado (
in p_idArtigo int
) 

begin
	select titulo, resumo, date_format(str_to_date(data_Publicacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data de publicação por ONNA', fonte from tblArtigo where idArtigo = p_idArtigo;
end /
delimiter ;









-- Procedures de chat privado

-- As próximas duas procedures devem ser executadas em sequência caso a usuária deseja conversar com um profissioanal

-- Salvar o contato do profissional na própria agenda

delimiter /
create procedure salvar_Contato_1 (
in p_idTipo_Usuario int,
in p_idContato int
)

begin
	insert into tblColecao_Contato (idTipo_Usuario, idContato) values (p_idTipo_Usuario, p_idContato);
end /
delimiter ; 

-- Salvar o próprio contato na agenda do profissional contatado

delimiter /
create procedure salvar_Contato_2 (
in p_idTipo_Usuario int,
in p_idContato int
)

begin
	insert into tblColecao_Contato (idTipo_Usuario, idContato) values (p_idContato, p_idTipo_Usuario);
end /
delimiter ; 

-- As próximas duas procedures devem ser executadas em sequência caso o usuário deseja remover um contato

-- Excluir um contato da própria lista de contatos

delimiter /
create procedure excluir_Contato_1 (
in p_idTipo_Usuario int,
in p_idContato int
)

begin
	delete from tblColecao_Contato where idTipo_Usuario = p_idTipo_Usuario and idContato = p_idContato;
end /
delimiter ; 

-- Excluir o próprio contato da lista do contato excluido

delimiter /
create procedure excluir_Contato_2 (
in p_idTipo_Usuario int,
in p_idContato int
)

begin
	delete from tblColecao_Contato where idTipo_Usuario = p_idContato and idContato = p_idTipo_Usuario;
end /
delimiter ; 


-- tblContato

delimiter /
create procedure exibir_Lista_Contatos (
in p_idTipo_Usuario int
)

begin
	select a.idContato,
	       b.avatar, b.nome,
		   c.area_Formacao from tblColecao_Contato a

           inner join tblContato d on a.idContato = d.idContato
           inner join tblTipo_Usuario b on d.idTipo_Usuario = b.idTipo_Usuario 
           left join tblPerfil_Profissional c on b.idTipo_Usuario = c.idTipo_Usuario where a.idTipo_Usuario = p_idTipo_Usuario and b.status_Ban = 0
           
           order by b.nome;
end /
delimiter ; 


-- tblConversa_Privada

delimiter /
create procedure enviar_Mensagem (
in p_mensagem varchar(4000),
in p_idTipo_Usuario int,
in p_idContato int
)

begin
	insert into tblConversa_Privada (mensagem, data_Mensagem, hora, idTipo_Usuario, idContato) values (p_mensagem, now(), now(), p_idTipo_Usuario, p_idContato);
end /
delimiter ; 

delimiter /
create procedure exibir_Mensagens (
in p_idTipo_Usuario int,
in p_idContato int
)

begin
	select mensagem, data_Mensagem, date_format(hora, '%H:%i') as 'Hora da mensagem' from tblConversa_Privada where idTipo_Usuario = p_idTipo_Usuario and idContato = p_idContato

    union all

    select mensagem, data_Mensagem, date_format(hora, '%H:%i') as 'Hora da mensagem' from tblConversa_Privada where idTipo_Usuario = p_idContato and idContato = p_idTipo_Usuario
    
    order by data_Mensagem, hora desc;
end /
delimiter ; 









-- Mobile do profissional

delimiter /
create procedure criar_Disponibilidade (
in p_idProfissional int,
in p_data_Disponibilidade date,
in p_hora_Inicial time,
in p_hora_Final time
)

begin
	insert into tblDisponibilidade (idProfissional, data_Disponibilidade, hora_Inicial, hora_Final) values (p_idProfissional, p_data_Disponibilidade, p_hora_Inicial, p_hora_Final);
end /
delimiter ; 

delimiter /
create procedure alterar_Disponibilidade (
in p_idProfissional int,
in p_data_Disponibilidade date,
in p_hora_Inicial time,
in p_hora_Final time
)

begin
	update tblDisponibilidade set data_Disponibilidade = p_data_Disponibilidade, hora_Inicial = p_hora_Inicial, hora_Final = p_hora_Final where idProfissional = p_idProfissional;
end /
delimiter ; 









-- Mobile da usuária comum

-- Função de assistência voluntária

delimiter /
create procedure procurar_Profissional_Fisiologico ()

begin
	select a.idProfissional from tblPerfil_Profissional a
    
    inner join tblDisponibilidade b on a.idProfissional = b.idProfissional where a.crm != null and now() >= hora_Inicial and now() < hora_Final and now() = data_Disponibilidade
    
    order by rand() limit 1;
end /
delimiter ; 

delimiter /
create procedure procurar_Profissional_Psicologico ()

begin
	select a.idProfissional from tblPerfil_Profissional a
    
    inner join tblDisponibilidade b on a.idProfissional = b.idProfissional where a.crp != null and now() >= hora_Inicial and now() < hora_Final and now() = data_Disponibilidade
    
    order by rand() limit 1;
end /
delimiter ; 


-- Funções das notificações

delimiter /
create procedure criar_Notificacao (
in p_titulo varchar(50),
in p_mensagem varchar(255),
in p_data_Notificacao date,
in p_hora time,
in p_idUsuario int
)

begin
	insert into tblNotificacao (titulo, mensagem, data_Notificacao, hora, idUsuario) values (p_titulo, p_mensagem, p_data_Notificacao, p_hora, p_idUsuario);
end /
delimiter ; 

delimiter /
create procedure exibir_Lista_Notificacoes (
in p_idUsuario int
)

begin
	select idNotificacao, titulo, mensagem, date_format(str_to_date(data_Notificacao, '%Y-%m-%d'), '%d/%m/%Y') as 'Data da notificação', date_format(hora, '%H:%i') as 'Hora da notificação' from tblNotificacao where idUsuario = p_idUsuario
    
    order by data_Notificacao, hora;
end /
delimiter ; 

delimiter /
create procedure excluir_Notificacao (
in p_idNotificacao int
)

begin
	delete from tblNotificacao where idNotificacao = p_idNotificacao;
end /
delimiter ; 


-- Funções do calendário menstrual

delimiter /
create procedure cadastrar_Calendario (
in p_dia_Marcado date,
in p_idUsuario int
)

begin
	insert into tblCalendario_Personalizado (dia_Marcado, idUsuario) values (p_dia_Marcado, p_idUsuario);
end /
delimiter ; 

delimiter /
create procedure alterar_Calendario (
in p_dia_Marcado date,
in p_periodo int, 
in p_idUsuario int
)

begin
	update tblCalendario_Personalizado set dia_Marcado = p_dia_Marcado, periodo = p_periodo where idUsuario = p_idUsuario;
end /
delimiter ;

delimiter /
create procedure definir_Intervalo_Calendario (
in p_idUsuario int
)

begin
	select periodo, dia_marcado as 'Data de início do fluxo menstrual', date_add(dia_Marcado, interval periodo day) as 'Data de término do fluxo menstrual' from tblCalendario_Personalizado where idUsuario = p_idUsuario;
end /
delimiter ;


-- Funções do relatório de humor

delimiter /
create procedure criar_Relatorio_Humor (
in p_idUsuario int,
in p_media_Humor decimal
)

begin
	insert into tblRelatorio_Humor (media_Humor, data_Relatorio, idUsuario) values (p_media_Humor, now(), p_idUsuario);
end /
delimiter ; 

delimiter /
create procedure exibir_Relatorios (
in p_idUsuario int
)

begin
	select media_Humor, date_format(str_to_date(data_Relatorio, '%Y-%m-%d'), '%d/%m/%Y') as 'Data do relatório' from tblRelatorio_Humor where idUsuario = p_idUsuario
    
    order by data_Relatorio desc;
end /
delimiter ; 
