
-- Inserções iniciais

use test;
drop database ONNA;

create database ONNA;
use ONNA;


-- Tabela central

create table tblTipo_Usuario(
idTipo_Usuario int primary key auto_increment,
status_Ban tinyint default 0,
email varchar(120) unique,
senha varchar(120) not null,	
nome varchar(100) not null,
dataNasc date not null,
avatar int not null, -- Serão imagens pré-selecionadas por nossa equipe, depositadas na pasta do aplicativo web/mobile
tipo_Usuario tinyint not null -- Valor [0] será perfil pessoal; valor [1] será perfil profissional
);


-- Funcionalidade de chat privado

create table tblContato(
idContato int primary key auto_increment,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblContato foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario)
);

create table tblColecao_Contato(
idColecao_Contato int primary key auto_increment,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblColecao_Contato foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idContato int not null,
constraint fkContato_tblColecao_Contato foreign key (idContato) references tblContato (idContato)   
);

create table tblConversa_Privada(
idConversa_Privada int primary key auto_increment,
mensagem varchar(2000) not null,
data_Mensagem date not null, -- now()
hora time not null, -- now()

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblConversa_Privada foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idContato int not null,
constraint fkContato_tblConversa_Privada foreign key (idContato) references tblContato (idContato) 
);


-- Funcionalidades do mobile "Perfil Pessoal"

create table tblPerfil_Pessoal(
idUsuario int primary key auto_increment,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblPerfil_Pessoal foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario)
);

create table tblAjuda(
idAjuda int primary key auto_increment,
titulo varchar(50) not null,
mensagem varchar(2000) not null,
data_Ajuda date not null,
hora time not null,

idUsuario int not null,
constraint fkPerfil_Pessoal_tblAjuda foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario)
);

create table tblNotificacao(
idNotificacao int primary key auto_increment,
mensagem varchar(2000) not null,

idUsuario int not null,
constraint fkPerfil_Pessoal_tblNotificacao foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario)
);

create table tblCalendario_Personalizado(
idCalendario int primary key auto_increment,
dia_Marcado date not null,
periodo int not null,

idUsuario int not null,
constraint fkPerfil_Pessoal_tblCalendario_Personalizado foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario)
);

create table tblHumor(
idHumor int primary key auto_increment,
humor int not null
);

create table tblRelatorio_Humor(
idRelatorio_Humor int primary key auto_increment,
media_Humor decimal not null,
data_Relatorio date not null, -- now()

idUsuario int not null,
constraint fkPerfil_Pessoal_tblRelatorio_Humor foreign key (idUsuario) references tblPerfil_Pessoal (idUsuario),

idHumor int not null,
constraint fkHumor_tblRelatorio_Humor foreign key (idHumor) references tblHumor (idHumor)
);


-- Funcionalidades do mobile "Perfil Profissional"

create table tblPerfil_Profissional(
idProfissional int primary key auto_increment,
crm char(8),
crp char(8),
area_Formacao varchar(80) not null,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblPerfil_Profissional foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario)
);

create table tblDia_Semana(
idDia_Semana int primary key auto_increment,
dia_Semana date not null -- Dia da semana que se repetirá periodicamente ao longo do calendário
);

create table tblDisponibilidade(
idDisponibilidade int primary key auto_increment,
hora_Inicial time not null, -- Início do intervalo de disponibilidade para chat
hora_Final time not null, -- Fim do intervalo de disponibilidade para chat,

idProfissional int not null,
constraint fkPerfil_Profissional_tblDisponibilidade foreign key (idProfissional) references tblPerfil_Profissional (idProfissional),

idDia_Semana int not null,
constraint fkDia_Semana_tblDisponibilidade foreign key (idDia_Semana) references tblDia_Semana (idDia_Semana)
);


-- Funcionalidades do website

create table tblForum(
idForum int primary key auto_increment,
nome varchar(80) not null,
descricao varchar(2000)
);

create table tblPostagem(
idPostagem int primary key auto_increment,
status_Ban tinyint default 0,
mensagem varchar(2000) not null,
imagem varbinary(45000),
data_Postagem date not null, -- now()
hora time not null, -- now()
gostei int,
desgostei int,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblPostagem foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idForum int not null,
constraint fkForum_tblPostagem foreign key (idForum) references tblForum (idForum)
);

create table tblResposta_Postagem(
idResposta_Postagem int primary key auto_increment,
status_Ban tinyint default 0,
mensagem varchar(2000) not null,
data_Resposta date not null, -- now()
hora time not null, -- now()
gostei int,
desgostei int,

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblResposta_Postagem foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idPostagem int not null,
constraint fkPostagem_tblResposta_Postagem foreign key (idPostagem) references tblPostagem (idPostagem)
);

create table tblDenuncia(
idDenuncia int primary key auto_increment,
status_Check tinyint default 0, -- Campo que receberá instância [1] quando a denúncia for resolvida no desktop 
descricao varchar(2000),
data_Denuncia date not null, -- now()
hora time not null, -- now()

idTipo_Usuario int not null,
constraint fkTipo_Usuario_tblDenuncia foreign key (idTipo_Usuario) references tblTipo_Usuario (idTipo_Usuario),

idPostagem int,
constraint fkPostagem_tblDenuncia foreign key (idPostagem) references tblPostagem (idPostagem),

idResposta_Postagem int,
constraint fkResposta_Postagem_tblDenuncia foreign key (idResposta_Postagem) references tblResposta_Postagem (idResposta_Postagem)
);

create table tblTipo_Denuncia(
idTipo_Denuncia int primary key, -- Cada inteiro irá se referir a um dos tipos já definidos (ofensa, discriminação etc.)
tipo varchar(40) not null
);

create table tblColecao_Tipo(
idColecao_Tipo int primary key auto_increment,

idDenuncia int not null,
constraint fkDenuncia_tblColecao_Tipo foreign key (idDenuncia) references tblDenuncia (idDenuncia),

idTipo_Denuncia int not null,
constraint fkTipo_Denuncia_tblColecao_Tipo foreign key (idTipo_Denuncia) references tblTipo_Denuncia (idTipo_Denuncia)
);


-- Funcionalidade Desktop

create table tblAdmin(
idAdmin int primary key auto_increment,
username varchar(120) not null @unique,
senha varchar(120) not null 
);

create table tblGenero(
idGenero int primary key, -- Cada inteiro irá se referir a um dos gêneros já definidos (maternidade, sexual etc.)
genero varchar(40) not null
);

create table tblArtigo(
idArtigo int primary key auto_increment,
titulo varchar(255) not null,
resumo varchar(2000) not null,
link varchar(2000) not null,
data_Publicacao date not null, -- now()

idAdmin int not null,
constraint fkAdmin_tblArtigo foreign key (idAdmin) references tblAdmin (idAdmin),

idGenero int not null,
constraint fkGenero_tblArtigo foreign key (idGenero) references tblGenero (idGenero)
);





-- Procedures Desktop


-- tblAdmin

delimiter $$
create procedure cadastro_Admin (
in $username varchar(120),
in $senha varchar(120))

begin
insert into tblAdmin (username, senha) values ($username, $senha);
end$$
delimiter ;

delimiter $$
create procedure login_Admin (
in $username varchar(120),
in $senha varchar(120))

begin
select * from tblAdmin where username = $username and senha = $senha;
end$$
delimiter ;


-- tblArtigo

delimiter $$
create procedure criar_Artigo (
in $titulo varchar(255), 
in $resumo varchar(2000), 
in $link varchar(2000), 
in $idGenero int)

begin
insert into tblArtigo (titulo, resumo, link, idGenero) values ($titulo, $resumo, $link, $idGenero);
end$$
delimiter ;

delimiter $$
create procedure consulta_Titulo_Artigo (
in $titulo varchar(255))

begin
select titulo from tblArtigo where titulo = $titulo order by titulo;
end$$
delimiter ;

delimiter $$
create procedure consulta_Superficial_Artigo ()

begin
select idArtigo, titulo, link from tblArtigo order by idArtigo;
end$$
delimiter ;

delimiter $$
create procedure consulta_Detalhada_Artigo (
in $idArtigo int)

begin
select titulo, resumo, link, idGenero from tblArtigo where idArtigo = $idArtigo;
end$$
delimiter ;

delimiter $$
create procedure excluir_Artigo (
in $idArtigo int)

begin
delete from tblArtigo where idArtigo = $idArtigo;
end$$
delimiter ;

delimiter $$
create procedure alterar_Artigo (
in $idArtigo int,
in $titulo varchar(255), 
in $resumo varchar(2000), 
in $link varchar(2000), 
in $idGenero int)

begin
update tblArtigo set titulo = $titulo, resumo = $resumo, link = $link, idGenero = $idGenero where idArtigo = $idArtigo;
end$$
delimiter ;


-- tblDenuncia

/*
delimiter $$
create procedure consulta_Superficial_Denuncia ()

begin
end$$
delimiter ;

delimiter $$
create procedure consulta_Detalhada_Denuncia ()

begin
end$$
delimiter ;
*/

delimiter $$
create procedure banir_Usuario (
in $idTipoUsuario int)

begin
update tblTipo_Usuario set status_Ban = 1 where idTipo_Usuario = $idTipo_Usuario;
end$$
delimiter ;

/*
delimiter $$
create procedure apagar_Postagem ()

begin
end$$
delimiter ;
*/

delimiter $$
create procedure ignorar_Denuncia (
in $idDenuncia int)

begin
update tblDenuncia set status_Checked = 1 where idDenuncia = $idDenuncia;
end$$
delimiter ;
